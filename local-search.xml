<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>LeetCode 2 两数相加</title>
    <link href="/2022/05/13/LeetCode-2-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/"/>
    <url>/2022/05/13/LeetCode-2-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-2-两数相加"><a href="#LeetCode-2-两数相加" class="headerlink" title="LeetCode 2 两数相加"></a><a href="https://leetcode.cn/problems/add-two-numbers/">LeetCode 2 两数相加</a></h1><h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>给你两个 <strong>非空</strong> 的链表，表示两个非负的整数。它们每位数字都是按照 <strong>逆序</strong> 的方式存储的，并且每个节点只能存储 <strong>一位</strong> 数字。</p><p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p><p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ul><li>链表是按照数字的<strong>逆序</strong>存储的</li><li>进位<strong>carry</strong>最大是1</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode() &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">addTwoNumbers</span><span class="hljs-params">(ListNode l1, ListNode l2)</span> &#123;<br>        <br>        <span class="hljs-type">int</span> <span class="hljs-variable">carry</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">head</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>, tail = <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">while</span>(l1 != <span class="hljs-literal">null</span> || l2 != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">val1</span> <span class="hljs-operator">=</span> l1==<span class="hljs-literal">null</span> ? <span class="hljs-number">0</span> : l1.val;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">val2</span> <span class="hljs-operator">=</span> l2==<span class="hljs-literal">null</span> ? <span class="hljs-number">0</span> : l2.val;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">valsum</span> <span class="hljs-operator">=</span> val1 + val2 + carry;<br><br>            <span class="hljs-keyword">if</span>(head == <span class="hljs-literal">null</span>)&#123;<br>                head = tail = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(valsum % <span class="hljs-number">10</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                tail.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(valsum % <span class="hljs-number">10</span>);<br>                tail = tail.next;<br>            &#125;<br><br>            carry = valsum / <span class="hljs-number">10</span>;<br>            l1 = l1==<span class="hljs-literal">null</span>? <span class="hljs-literal">null</span> : l1.next;<br>            l2 = l2==<span class="hljs-literal">null</span>? <span class="hljs-literal">null</span> : l2.next;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(carry != <span class="hljs-number">0</span>)&#123;<br>            tail.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(carry);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Algorithm Problems</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>LeetCode HOT 100</tag>
      
      <tag>LinkedList</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 1 两数之和</title>
    <link href="/2022/05/13/LeetCode-1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <url>/2022/05/13/LeetCode-1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-1-两数之和"><a href="#LeetCode-1-两数之和" class="headerlink" title="LeetCode 1 两数之和"></a><a href="https://leetcode.cn/problems/two-sum/">LeetCode 1 两数之和</a></h1><h1 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h1><p>给定一个整数数组 <strong>nums</strong> 和一个整数目标值 <strong>target</strong>，请你在该数组中找出 和为目标值 <strong>target</strong>  的那 两个 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>遍历数组的同时查询Map是否有target - nums[i]的值，如果没有，将当前nums[i]和索引i加入到Map中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] twoSum(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target) &#123;<br>        <br>        <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> nums.length;<br>        HashMap&lt;Integer, Integer&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Integer, Integer&gt;();<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; length;i ++)&#123;<br>            <span class="hljs-keyword">if</span>(hashMap.containsKey(target - nums[i]))&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[] &#123;i, hashMap.get(target - nums[i])&#125;;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                hashMap.put(nums[i], i);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[] &#123;<span class="hljs-number">0</span>&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Algorithm Problems</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>LeetCode HOT 100</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 面试题0105 一次编辑</title>
    <link href="/2022/05/13/LeetCode-%E9%9D%A2%E8%AF%95%E9%A2%980105-%E4%B8%80%E6%AC%A1%E7%BC%96%E8%BE%91/"/>
    <url>/2022/05/13/LeetCode-%E9%9D%A2%E8%AF%95%E9%A2%980105-%E4%B8%80%E6%AC%A1%E7%BC%96%E8%BE%91/</url>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-面试题0105-一次编辑"><a href="#LeetCode-面试题0105-一次编辑" class="headerlink" title="LeetCode 面试题0105 一次编辑"></a><a href="https://leetcode.cn/problems/one-away-lcci/">LeetCode 面试题0105 一次编辑</a></h1><h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>字符串有三种编辑操作:插入一个字符、删除一个字符或者替换一个字符。 给定两个字符串，编写一个函数判定它们是否只需要一次(或者零次)编辑。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><strong>一次编辑</strong>两个字符串长度最多相差1；</p><p><strong>顺序检查</strong>是否需要超过一次的编辑；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">oneEditAway</span><span class="hljs-params">(String first, String second)</span> &#123;<br>       <br>        <span class="hljs-type">int</span> <span class="hljs-variable">diffLength</span> <span class="hljs-operator">=</span> first.length() - second.length();<br>        <span class="hljs-keyword">if</span>(diffLength &gt; <span class="hljs-number">1</span> || diffLength &lt; -<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;i &lt; first.length() &amp;&amp; j &lt; second.length();i ++, j ++)&#123;<br>            <span class="hljs-keyword">if</span>(first.charAt(i) != second.charAt(j))&#123;<br>                <span class="hljs-keyword">if</span>(flag)&#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    flag = <span class="hljs-literal">true</span>;<br>                    <span class="hljs-keyword">if</span>(diffLength == -<span class="hljs-number">1</span>)&#123;<br>                        i --;<br>                    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(diffLength == <span class="hljs-number">1</span>)&#123;<br>                        j --;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Algorithm Problems</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>String</tag>
      
      <tag>每日一题</tag>
      
      <tag>程序员面试金典（第 6 版）</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 35 搜索插入位置</title>
    <link href="/2022/04/30/LeetCode-35-%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/"/>
    <url>/2022/04/30/LeetCode-35-%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-35-搜索插入位置"><a href="#LeetCode-35-搜索插入位置" class="headerlink" title="LeetCode 35 搜索插入位置"></a><a href="https://leetcode-cn.com/problems/search-insert-position/">LeetCode 35 搜索插入位置</a></h1><h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p><p>请必须使用时间复杂度为 <strong>O(log n)</strong> 的算法。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>本题是<a href="/2022/04/29/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/" title="二分查找(Binary Search)">二分查找(Binary Search)</a>中介绍的<em><strong>第一个≥5的元素</strong></em>二分查找方法，注意以下几点即可：</p><ul><li><strong>l &#x3D; -1, r &#x3D; N</strong></li><li><strong>l&#x2F;r &#x3D; m</strong></li><li><strong>return r</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">searchInsert</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> nums.length;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>, r = length;<br>        <span class="hljs-keyword">while</span>(l + <span class="hljs-number">1</span> != r)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> (r - l) / <span class="hljs-number">2</span> + l;<br>            <span class="hljs-keyword">if</span>(nums[m] &lt; target)&#123;<br>                l = m;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                r = m;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> r;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Algorithm Problems</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>BinarySearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 398 随机数索引</title>
    <link href="/2022/04/30/LeetCode-398-%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%B4%A2%E5%BC%95/"/>
    <url>/2022/04/30/LeetCode-398-%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%B4%A2%E5%BC%95/</url>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-398-随机数索引"><a href="#LeetCode-398-随机数索引" class="headerlink" title="LeetCode 398 随机数索引"></a><a href="https://leetcode-cn.com/problems/random-pick-index/">LeetCode 398 随机数索引</a></h1><h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>给你一个可能含有 <strong>重复元素</strong> 的整数数组 <strong>nums</strong> ，请你随机输出给定的目标数字 <strong>target</strong> 的索引。你可以假设给定的数字一定存在于数组中。</p><p>实现 <strong>Solution</strong> 类：</p><ul><li><p><strong>Solution(int[] nums)</strong> 用数组 <strong>nums</strong> 初始化对象。</p></li><li><p><strong>int pick(int target)</strong> 从 <strong>nums</strong> 中选出一个满足 <strong>nums[i] &#x3D;&#x3D; target</strong> 的随机索引 i 。如果存在多个有效的索引，则每个索引的返回概率应当相等。</p></li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="哈希法"><a href="#哈希法" class="headerlink" title="哈希法"></a>哈希法</h3><p>如果不考虑数组的大小，我们可以在构造函数中，用一个哈希表 <strong>pos</strong> 记录 <strong>nums</strong>中相同元素的下标。</p><ul><li>时间复杂度<strong>O(n)</strong></li><li>空间复杂度<strong>O(n)</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> length;<br>    <span class="hljs-keyword">public</span> Random random;<br>    <span class="hljs-keyword">public</span> HashMap&lt;Integer, List&lt;Integer&gt;&gt; pos;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Solution</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        length = nums.length;<br>        random = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        pos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Integer, List&lt;Integer&gt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; length;i ++)&#123;<br>            pos.putIfAbsent(num, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;());<br>            pos.get(num).add(i);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pick</span><span class="hljs-params">(<span class="hljs-type">int</span> target)</span> &#123;<br>        List&lt;Integer&gt; targetIndexs =  pos.get(target);<br>        <span class="hljs-keyword">return</span> targetIndexs.get(random.nextInt(targetIndexs.size()));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="蓄水池抽样"><a href="#蓄水池抽样" class="headerlink" title="蓄水池抽样"></a>蓄水池抽样</h3><p>如果数组以文件形式存储（读者可假设构造函数传入的是个文件路径），且文件大小远超内存大小，我们是无法通过读文件的方式，将所有下标保存在内存中的，蓄水池抽样算法可以解决上述问题。</p><ul><li>时间复杂度<strong>O(n)</strong></li><li>空间复杂度<strong>O(1)</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] nums;<br>    <span class="hljs-keyword">public</span> Random random;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Solution</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-built_in">this</span>.nums = nums;<br>        random = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pick</span><span class="hljs-params">(<span class="hljs-type">int</span> target)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>, count = <span class="hljs-number">0</span>, length = nums.length;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; length;i ++)&#123;<br>            <span class="hljs-keyword">if</span>(nums[i] == target)&#123;<br>                count ++;<br>                <span class="hljs-keyword">if</span>(random.nextInt(count) == <span class="hljs-number">0</span>)&#123;<br>                    index = i;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> index;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Algorithm Problems</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>ReservoirSampling</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>蓄水池抽样(Reservoir Sampling)</title>
    <link href="/2022/04/30/%E8%93%84%E6%B0%B4%E6%B1%A0%E6%8A%BD%E6%A0%B7/"/>
    <url>/2022/04/30/%E8%93%84%E6%B0%B4%E6%B1%A0%E6%8A%BD%E6%A0%B7/</url>
    
    <content type="html"><![CDATA[<h1 id="蓄水池抽样-Reservoir-Sampling"><a href="#蓄水池抽样-Reservoir-Sampling" class="headerlink" title="蓄水池抽样(Reservoir Sampling)"></a>蓄水池抽样(Reservoir Sampling)</h1><p><strong>蓄水池抽样(Reservoir Sampling)<strong>解决的问题是如何在一个</strong>未知长度</strong>的序列中<strong>随机取样</strong>，这是一个经典的概率问题。</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>蓄水池取样算法的基本问题是，如何从一个<strong>未知行数</strong>的文本文件中随机选择<strong>一行</strong>，其存在如下特点：</p><ul><li>只能顺序读取每一行</li><li>不能将整个文件加载到内存中</li></ul><p>蓄水池取样算法的伪代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">i = <span class="hljs-number">0</span><br>s = <span class="hljs-literal">null</span><br><span class="hljs-keyword">for</span> line in 文本文件:<br>i = i + <span class="hljs-number">1</span><br>r = 生成[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)的随机数<br>    <span class="hljs-keyword">if</span>(r &lt; <span class="hljs-number">1</span> / i):<br>    s = line<br></code></pre></td></tr></table></figure><h2 id="扩展问题"><a href="#扩展问题" class="headerlink" title="扩展问题"></a>扩展问题</h2><p>如何从一个<strong>未知行数</strong>的文本文件中随机选择<strong>k行</strong>？</p><p>蓄水池取样算法扩展问题的伪代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">i = <span class="hljs-number">0</span><br>s = []<br><span class="hljs-keyword">for</span> line in 文本文件:<br>i = i + <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span>(i &lt;= K):<br>s.append(line)<br>   <span class="hljs-keyword">else</span>:<br>r = 生成[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)的随机数<br>        <span class="hljs-keyword">if</span>(r &lt; k / i):<br>    j = 生成[<span class="hljs-number">1</span>,k]的随机数<br>            s[j] = line<br></code></pre></td></tr></table></figure><p>代码也可简化为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">i = <span class="hljs-number">0</span><br>s = []<br><span class="hljs-keyword">for</span> line in 文本文件:<br>i = i + <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span>(i &lt;= K):<br>s.append(line)<br>   <span class="hljs-keyword">else</span>:<br>    j = 生成[<span class="hljs-number">1</span>,i]的随机数<br>        <span class="hljs-keyword">if</span>(j &lt;= k):<br>s[j] = line<br></code></pre></td></tr></table></figure><p>证明过程可参考<a href="https://www.bilibili.com/video/BV17i4y1j7wE?spm_id_from=333.999.0.0">【经典算法题】蓄水池抽样算法</a></p>]]></content>
    
    
    <categories>
      
      <category>Algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ReservoirSampling</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 374 猜数字大小</title>
    <link href="/2022/04/30/LeetCode-374-%E7%8C%9C%E6%95%B0%E5%AD%97%E5%A4%A7%E5%B0%8F/"/>
    <url>/2022/04/30/LeetCode-374-%E7%8C%9C%E6%95%B0%E5%AD%97%E5%A4%A7%E5%B0%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-374-猜数字大小"><a href="#LeetCode-374-猜数字大小" class="headerlink" title="LeetCode 374 猜数字大小"></a><a href="https://leetcode-cn.com/problems/guess-number-higher-or-lower/">LeetCode 374 猜数字大小</a></h1><h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>猜数字游戏的规则如下：</p><p>每轮游戏，我都会从 <strong>1</strong> 到 <strong>n</strong> 随机选择一个数字。 请你猜选出的是哪个数字。<br>如果你猜错了，我会告诉你，你猜测的数字比我选出的数字是大了还是小了。<br>你可以通过调用一个预先定义好的接口 <strong>int guess(int num)</strong> 来获取猜测结果，返回值一共有 3 种可能的情况（-1，1 或 0）：</p><ul><li><p>-1：我选出的数字比你猜的数字小 <strong>pick &lt; num</strong></p></li><li><p>1：我选出的数字比你猜的数字大 <strong>pick &gt; num</strong></p></li><li><p>0：我选出的数字和你猜的数字一样。恭喜！你猜对了！<strong>pick &#x3D;&#x3D; num</strong><br>返回我选出的数字。</p></li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ul><li>注意guess(int num)的含义</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** </span><br><span class="hljs-comment"> * Forward declaration of guess API.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span>  num   your guess</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span>      -1 if num is lower than the guess number</span><br><span class="hljs-comment"> *      1 if num is higher than the guess number</span><br><span class="hljs-comment"> *               otherwise return 0</span><br><span class="hljs-comment"> * int guess(int num);</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GuessGame</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">guessNumber</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>, r = n;<br>        <span class="hljs-keyword">while</span>(l &lt; r)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> (r - l) / <span class="hljs-number">2</span> + l;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> guess(m);<br>            <span class="hljs-keyword">if</span>(flag &lt;= <span class="hljs-number">0</span>)&#123;<br>                r = m;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                l = m + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> l;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Algorithm Problems</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>BinarySearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 704 二分查找</title>
    <link href="/2022/04/30/LeetCode-704-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    <url>/2022/04/30/LeetCode-704-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-704-二分查找"><a href="#LeetCode-704-二分查找" class="headerlink" title="LeetCode 704 二分查找"></a><a href="https://leetcode-cn.com/problems/binary-search/">LeetCode 704 二分查找</a></h1><h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>给定一个 <strong>n</strong> 个元素有序的（升序）整型数组 <strong>nums</strong> 和一个目标值 target  ，写一个函数搜索 <strong>nums</strong> 中的 <strong>target</strong>，如果目标值存在返回下标，否则返回 <strong>-1</strong>。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, r = nums.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(l &lt; r)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> (r - l) / <span class="hljs-number">2</span> + l;<br>            <span class="hljs-keyword">if</span>(nums[m] &gt;= target)&#123;<br>                r = m;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                l = m + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(nums[l] == target)&#123;<br>            <span class="hljs-keyword">return</span> l;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Algorithm Problems</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>BinarySearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二分查找(Binary Search)</title>
    <link href="/2022/04/29/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    <url>/2022/04/29/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="二分查找-Binary-Search"><a href="#二分查找-Binary-Search" class="headerlink" title="二分查找(Binary Search)"></a>二分查找(Binary Search)</h1><p>二分查找(Binary Search)是一种在<strong>有序数组</strong>对于<strong>单个特定元素</strong>的搜索算法，即二分查找的限制条件是<strong>数组有序和查找元素是唯一的</strong>。虽然二分查找的思想非常简单，但是处理边界条件的时候十分容易出错。  </p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>为了阐述一种二分查找通用的解决办法，暂时破坏<strong>元素唯一</strong>这一特性。如下图所示，有序数组划分为三个部分，蓝色部分是小于特定元素的区间，橙色部分是等于特定元素的区间，红色是大于特定元素的区间。</p><p><img src="https://fastly.jsdelivr.net/gh/NewVo1d/ImageHosting/imgs/2022/07/15/38330166e8b072807e190647fe0fbc1a-image-20220429230800270-dd8c6e.png" alt="示意图"></p><p>注意箭头所指的四个特殊的数字：</p><ul><li>最后一个＜5的元素</li><li>第一个≥5的元素</li><li>最后一个≤5的元素</li><li>第一个≥5的元素</li></ul><h2 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h2><p>下面是一个通用的二分算法模板，其中<strong>l的初始值为-1</strong>，<strong>r的初始值为N</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch</span><span class="hljs-params">(<span class="hljs-type">int</span> N)</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>, r = N;<br>    <span class="hljs-keyword">while</span>(i + <span class="hljs-number">1</span> != r)&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> l + r &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(check)&#123;<br>            l = m;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            r = m;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> l or r;<br>&#125;<br></code></pre></td></tr></table></figure><p>根据如下表格对应情况替换算法<strong>第4行</strong>和<strong>第10行</strong>即可得到上述四个元素。</p><table><thead><tr><th align="center"></th><th align="center">check 语句</th><th align="center">return 语句</th></tr></thead><tbody><tr><td align="center">最后一个＜5的元素</td><td align="center">&lt;5</td><td align="center">return l</td></tr><tr><td align="center">第一个≥5的元素</td><td align="center">&lt;5</td><td align="center">return r</td></tr><tr><td align="center">最后一个≤5的元素</td><td align="center">&gt;&#x3D;5</td><td align="center">return l</td></tr><tr><td align="center">第一个≥5的元素</td><td align="center">&gt;&#x3D;5</td><td align="center">return r</td></tr></tbody></table><p>上述伪代码是为了更好理解二分查找的细节问题，下面给出正式的二分查找代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, r = nums.length - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(l &lt; r)&#123;<br>        <span class="hljs-comment">//当l == r时停止循环</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> (r - l) / <span class="hljs-number">2</span> + l;<span class="hljs-comment">//防止溢出</span><br>        <span class="hljs-keyword">if</span>(nums[m] &gt;= target)&#123;<br>            r = m;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            l = m + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> l;<span class="hljs-comment">//此时l和r收敛到同一个点</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BinarySearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
